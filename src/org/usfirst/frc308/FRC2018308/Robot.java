// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc308.FRC2018308;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc308.FRC2018308.commands.*;
import org.usfirst.frc308.FRC2018308.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	public static SendableChooser<Command> chooser = new SendableChooser<>();

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Arm arm;
	public static Chassis chassis;
	public static Pneumatics pneumatics;
	public static Claw claw;
	public static Lift lift;
	public Thread fmsData;
	public boolean done = false;
	public String fieldLayout;
	// public static AutonomousGetFieldLayout fmsdata;

	// Variable to determine configuration settings for Practice vs Game Bot
	// inGameMode = False is Practice Bot. inGameMode= True is Game Bot.
	public static boolean inGameMode = true;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		SmartDashboard dash = new SmartDashboard();

		// Add commands to Autonomous Sendable Chooser
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// autonomousCommand = new AutonomousCrossLine();
		arm = new Arm();
		chassis = new Chassis();
		pneumatics = new Pneumatics();
		claw = new Claw();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();
		lift = new Lift();
		CameraServer.getInstance().startAutomaticCapture();

		chooser.addObject("Center", new AutonomousNullCenter());
		chooser.addObject("Right", new AutonomousNullRight());
		chooser.addObject("Left", new AutonomousNullLeft());
		chooser.addDefault("Cross Line", new AutonomousCrossLine());
		chooser.addObject("Strafe Test", new AutonomousStrafeCommand());

		SmartDashboard.putData("Autonomous Chooser", Robot.chooser);
		// SmartDashboard.putString("Field Layout:",
		// AutonomousGetFieldLayout.fieldLayout);
	}

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void autonomousInit() {
		// System.out.println("Thread Started");

		// System.out.println("Getting Data ");
		int retries = 50;

		fieldLayout = DriverStation.getInstance().getGameSpecificMessage();
		// System.out.println("Getting Data ");
		if (fieldLayout.isEmpty()) {
			done = false;
		} else {
			done = true;
		}
		// autonomousCommand = new RightScaleAutonomousCommand();
		// if (fieldLayout.equals("RRR") || fieldLayout.equals("RLR")) {
		// System.out.println("DiagonalRightAutonomousCommand");
		// autonomousCommand = new DiagonalRightAutonomousCommand();
		// } else if (fieldLayout.equals("LLL") || fieldLayout.equals("LRL")) {
		// System.out.println("DiagonalLeftAutonomousCommand");
		// autonomousCommand = new DiagonalLeftAutonomousCommand();
		// }else {
		// autonomousCommand = new AutonomousCrossLine();
		// }

//CENTER CONDITIONS		
		if (chooser.getSelected() == new AutonomousNullCenter()) {
			if (AutonomousGetFieldLayout.fieldLayout.equals("RRR") || AutonomousGetFieldLayout.fieldLayout.equals("RLR")) {
				autonomousCommand = new DiagonalRightAutonomousCommand();
			} else if (AutonomousGetFieldLayout.fieldLayout.equals("LLL") || AutonomousGetFieldLayout.fieldLayout.equals("LRL")) {
				autonomousCommand = new DiagonalLeftAutonomousCommand();
			} else {
				autonomousCommand = new AutonomousCrossLine();
			}
//LEFT CONDITIONS
		} else if (chooser.getSelected() == new AutonomousNullLeft()) {
			if (AutonomousGetFieldLayout.fieldLayout.equals("LLL")) {
				autonomousCommand = new LeftScaleAutonomousCommand();
			} else if (AutonomousGetFieldLayout.fieldLayout.equals("LRL")) {
				autonomousCommand = new LeftSwitchAutonomousCommand();
			} else if (AutonomousGetFieldLayout.fieldLayout.equals("RLR")) {
				autonomousCommand = new LeftScaleAutonomousCommand();
			} else {
				autonomousCommand = new AutonomousCrossLine();
			}
//RIGHT CONDITIONS
		} else if (chooser.getSelected() == new AutonomousNullRight()) {
			if (AutonomousGetFieldLayout.fieldLayout.equals("RRR")) {
				autonomousCommand = new RightScaleAutonomousCommand();
			} else if (AutonomousGetFieldLayout.fieldLayout.equals("RLR")) {
				autonomousCommand = new RightSwitchAutonomousCommand();
			} else if(AutonomousGetFieldLayout.fieldLayout.equals("LRL")){
				autonomousCommand = new RightScaleAutonomousCommand();
			}else {
				autonomousCommand = new AutonomousCrossLine();
			}
//DEFAULT
		} else {
			autonomousCommand = new AutonomousCrossLine();
		}

		if (done == true) {
			System.out.println(fieldLayout);
		} else {
			System.out.println("NO Data");

		}

		if (autonomousCommand != null)
			autonomousCommand.start();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.

		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {

		Scheduler.getInstance().run();

	}

	// public static void getFMS() {
	//
	// if (fieldLayout != null) {
	// try {
	// fieldLayout = DriverStation.getInstance().getGameSpecificMessage();
	// System.out.println("Getting Data ");
	// if(fieldLayout.equals(null)) {
	// done = false;
	// }else {
	// done = true;
	// }
	// }catch (Exception e) {
	//
	// }
	// }
	// }

}
